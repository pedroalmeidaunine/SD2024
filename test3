import pygame
import random
import sys
import json
from pygame.locals import *
from moviepy.editor import VideoFileClip

# Initialize Pygame and window settings
pygame.init()
infoObject = pygame.display.Info()
WINDOWWIDTH = infoObject.current_w
WINDOWHEIGHT = infoObject.current_h

TEXTCOLOR = (0, 0, 0)
FPS = 60
PLAYERMOVERATE = 5
BADDIEMINSIZE = 10
BADDIEMAXSIZE = 40
BADDIEMINSPEED = 1
BADDIEMAXSPEED = 8
ADDNEWBADDIERATE = 6

# Load and save high scores
def load_scores():
    try:
        with open('scores.txt', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_scores(scores):
    with open('scores.txt', 'w') as f:
        json.dump(scores, f)

scores = load_scores()

def terminate():
    pygame.quit()
    sys.exit()

# Function to wait for player input
def waitForPlayerToPressKey():
    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                terminate()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    terminate()
                return
            elif event.type == MOUSEBUTTONDOWN:
                return

def playerHasHitBaddie(playerRect, baddies):
    for b in baddies:
        if playerRect.colliderect(b['rect']):
            return True
    return False

def playerHasHitProjectile(playerRect, projectiles):
    for p in projectiles:
        if playerRect.colliderect(p['rect']):
            return True
    return False

# Draw text and buttons
def drawText(text, font, surface, x, y, color=TEXTCOLOR):
    textobj = font.render(text, 1, color)
    textrect = textobj.get_rect()
    textrect.topleft = (x, y)
    surface.blit(textobj, textrect)

def draw_button(surface, text, x, y, width, height, color):
    pygame.draw.rect(surface, color, (x, y, width, height))
    drawText(text, smallFont, surface, x + 10, y + 10)

# Load resources
mainClock = pygame.time.Clock()
windowSurface = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))
pygame.display.set_caption('Dodger Game')
pygame.mouse.set_visible(True)

font = pygame.font.SysFont(None, 48)
smallFont = pygame.font.SysFont(None, 36)

playerImage = pygame.image.load('player.png').convert_alpha()
playerImage = pygame.transform.scale(playerImage, (50, 50))
playerRect = playerImage.get_rect()
baddieImage = pygame.image.load('baddie.png')

# Explosion images
explosion_images = [pygame.image.load(f"exp{i}.png").convert_alpha() for i in range(1, 6)]
explosion_images = [pygame.transform.scale(img, (100, 100)) for img in explosion_images]

waterImage = pygame.image.load('water.png').convert()
waterRect = waterImage.get_rect()

backgroundX = 0
backgroundSpeed = 2

# Function to play the intro video
def play_intro_video(video_path):
    clip = "intro.mp4"
    clip = clip.resize((WINDOWWIDTH, WINDOWHEIGHT))  # Adjust video size to fit the Pygame window
    
    for frame in clip.iter_frames(fps=FPS, dtype="uint8"):
        frame_surface = pygame.surfarray.make_surface(frame.swapaxes(0, 1))
        windowSurface.blit(frame_surface, (0, 0))
        pygame.display.update()

        for event in pygame.event.get():
            if event.type == QUIT:
                terminate()
    
    clip.close()

# Explosion class
class Explosion:
    def __init__(self, x, y):
        self.images = explosion_images
        self.index = 0
        self.image = self.images[self.index]
        self.rect = self.image.get_rect(center=(x, y))
        self.counter = 0
        self.explosion_speed = 4

    def update(self):
        self.counter += 1
        if self.counter >= self.explosion_speed and self.index < len(self.images) - 1:
            self.counter = 0
            self.index += 1
            self.image = self.images[self.index]
        return self.index >= len(self.images) - 1  # Return True if animation is done

# Main menu function
def show_main_menu():
    playerName = ""
    selectedLevel = None
    while True:
        windowSurface.fill((255, 255, 255))
        drawText('Dodger Game', font, windowSurface, (WINDOWWIDTH / 3), (WINDOWHEIGHT / 6))
        drawText('Enter your name: ' + playerName, smallFont, windowSurface, (WINDOWWIDTH / 3), (WINDOWHEIGHT / 3))
        drawText('Select Difficulty:', smallFont, windowSurface, (WINDOWWIDTH / 3), (WINDOWHEIGHT / 2))

        # Set colors based on selected difficulty level
        easy_color = (255, 0, 0) if selectedLevel == 'easy' else (0, 0, 0)
        medium_color = (255, 0, 0) if selectedLevel == 'medium' else (0, 0, 0)
        hard_color = (255, 0, 0) if selectedLevel == 'hard' else (0, 0, 0)

        # Display difficulty options
        drawText('1. Easy', smallFont, windowSurface, (WINDOWWIDTH / 3), (WINDOWHEIGHT / 2) + 40, easy_color)
        drawText('2. Medium', smallFont, windowSurface, (WINDOWWIDTH / 3), (WINDOWHEIGHT / 2) + 80, medium_color)
        drawText('3. Hard', smallFont, windowSurface, (WINDOWWIDTH / 3), (WINDOWHEIGHT / 2) + 120, hard_color)

        # Display Start button with appropriate color
        start_button_color = (0, 255, 0) if playerName and selectedLevel else (150, 150, 150)
        start_button_x = WINDOWWIDTH / 2 - 50
        start_button_y = (WINDOWHEIGHT / 2) + 160
        draw_button(windowSurface, 'Start', start_button_x, start_button_y, 100, 40, start_button_color)

        # Display QUIT button at bottom right
        quit_button_x = WINDOWWIDTH - 120
        quit_button_y = WINDOWHEIGHT - 60
        draw_button(windowSurface, 'QUIT', quit_button_x, quit_button_y, 100, 40, (255, 0, 0))

        pygame.display.update()
        
        for event in pygame.event.get():
            if event.type == QUIT:
                terminate()
            elif event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    terminate()
                elif event.key == K_RETURN and playerName and selectedLevel:
                    return playerName, selectedLevel
                elif event.key == K_BACKSPACE:
                    playerName = playerName[:-1]
                elif event.unicode.isalpha():
                    playerName += event.unicode
                elif event.key == K_1:
                    selectedLevel = 'easy'
                elif event.key == K_2:
                    selectedLevel = 'medium'
                elif event.key == K_3:
                    selectedLevel = 'hard'
            elif event.type == MOUSEBUTTONDOWN:
                if event.button == 1:  # Left mouse button
                    mouse_x, mouse_y = event.pos
                    
                    # Check if Start button clicked
                    if (start_button_x < mouse_x < start_button_x + 100) and (start_button_y < mouse_y < start_button_y + 40) and playerName and selectedLevel:
                        return playerName, selectedLevel
                    
                    # Check if QUIT button clicked
                    elif (quit_button_x < mouse_x < quit_button_x + 100) and (quit_button_y < mouse_y < quit_button_y + 40):
                        terminate()
                    
                    # Check if difficulty buttons clicked
                    if (WINDOWWIDTH / 3 < mouse_x < WINDOWWIDTH / 3 + 100):
                        if (WINDOWHEIGHT / 2 + 40 < mouse_y < WINDOWHEIGHT / 2 + 80):
                            selectedLevel = 'easy'
                        elif (WINDOWHEIGHT / 2 + 80 < mouse_y < WINDOWHEIGHT / 2 + 120):
                            selectedLevel = 'medium'
                        elif (WINDOWHEIGHT / 2 + 120 < mouse_y < WINDOWHEIGHT / 2 + 160):
                            selectedLevel = 'hard'


# Game loop
def game_loop(playerName, selectedLevel):
    global ADDNEWBADDIERATE, BADDIEMAXSPEED
    if selectedLevel == 'easy':
        ADDNEWBADDIERATE = 6
        BADDIEMAXSPEED = 6
    elif selectedLevel == 'medium':
        ADDNEWBADDIERATE = 8
        BADDIEMAXSPEED = 9
    else:
        ADDNEWBADDIERATE = 9
        BADDIEMAXSPEED = 13

    baddies = []
    projectiles = []
    explosions = []  # Store explosions
    score = 0
    playerRect.topleft = (50, WINDOWHEIGHT / 2)
    moveLeft = moveRight = moveUp = moveDown = False
    baddieAddCounter = 0

    while True:
        score += 1

        for event in pygame.event.get():
            if event.type == QUIT:
                terminate()
            elif event.type == KEYDOWN:
                if event.key in [K_LEFT, K_a]: moveLeft = True
                elif event.key in [K_RIGHT, K_d]: moveRight = True
                elif event.key in [K_UP, K_w]: moveUp = True
                elif event.key in [K_DOWN, K_s]: moveDown = True
                elif event.key == K_SPACE:
                    projectile = {'rect': pygame.Rect(playerRect.right, playerRect.centery - 5, 10, 5),
                                  'surface': pygame.Surface((10, 5))}
                    projectile['surface'].fill((255, 0, 0))
                    projectiles.append(projectile)
            elif event.type == KEYUP:
                if event.key in [K_LEFT, K_a]: moveLeft = False
                elif event.key in [K_RIGHT, K_d]: moveRight = False
                elif event.key in [K_UP, K_w]: moveUp = False
                elif event.key in [K_DOWN, K_s]: moveDown = False
            elif event.type == MOUSEMOTION:
                playerRect.center = event.pos

        if moveLeft and playerRect.left > 0:
            playerRect.move_ip(-1 * PLAYERMOVERATE, 0)
        if moveRight and playerRect.right < WINDOWWIDTH:
            playerRect.move_ip(PLAYERMOVERATE, 0)
        if moveUp and playerRect.top > 0:
            playerRect.move_ip(0, -1 * PLAYERMOVERATE)
        if moveDown and playerRect.bottom < WINDOWHEIGHT:
            playerRect.move_ip(0, PLAYERMOVERATE)

        baddieAddCounter += 1
        if baddieAddCounter >= ADDNEWBADDIERATE:
            baddieAddCounter = 0
            baddieSize = random.randint(BADDIEMINSIZE, BADDIEMAXSIZE)
            newBaddie = {
                'rect': pygame.Rect(WINDOWWIDTH, random.randint(0, WINDOWHEIGHT - baddieSize), baddieSize, baddieSize),
                'surface': pygame.transform.scale(baddieImage, (baddieSize, baddieSize)),
                'speed': random.randint(BADDIEMINSPEED, BADDIEMAXSPEED)
            }
            baddies.append(newBaddie)

        for b in baddies[:]:
            b['rect'].move_ip(-b['speed'], 0)
            if b['rect'].left < 0:
                baddies.remove(b)

        for projectile in projectiles[:]:
            projectile['rect'].move_ip(5, 0)
            if projectile['rect'].left > WINDOWWIDTH:
                projectiles.remove(projectile)

        # Check for projectile collisions with baddies
        for b in baddies[:]:
            for projectile in projectiles[:]:
                if b['rect'].colliderect(projectile['rect']):
                    # Create an explosion at the baddie's position
                    explosions.append(Explosion(b['rect'].centerx, b['rect'].centery))
                    baddies.remove(b)
                    projectiles.remove(projectile)
                    break

        # Update and draw explosions
        for explosion in explosions[:]:
            if explosion.update():
                explosions.remove(explosion)

        if playerHasHitBaddie(playerRect, baddies):
            if playerName in scores:
                scores[playerName] = max(scores[playerName], score)
            else:
                scores[playerName] = score
            save_scores(scores)
            return

        windowSurface.fill((255, 255, 255))
        windowSurface.blit(waterImage, (backgroundX, 0))

        for b in baddies:
            windowSurface.blit(b['surface'], b['rect'])

        for projectile in projectiles:
            windowSurface.blit(projectile['surface'], projectile['rect'])

        for explosion in explosions:
            windowSurface.blit(explosion.image, explosion.rect)

        windowSurface.blit(playerImage, playerRect)
        drawText(f'Score: {score}', smallFont, windowSurface, 10, 10)

        pygame.display.update()
        mainClock.tick(FPS)

# Main application loop
while True:
    playerName, selectedLevel = show_main_menu()
    game_loop(playerName, selectedLevel)
    play_intro_video(r"C:\Users\Prêt à démarrer\OneDrive\Documents\GitHub\SD2024\intro.mp4")  # Play the video here   
   
